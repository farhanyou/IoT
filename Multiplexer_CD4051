//Define the number of sensors attached to the board
#define NUM_SENSORS 8

//Define multiplexer control pins
#define MUX_CONTROL_PINS_SZ 3
#define MUX_A D4
#define MUX_B D5
#define MUX_C D6

//Macro to convert temperature value into C/F units
#define TEMP_C(X) ((X * (5000 / 1024)) / 10)
#define TEMP_F(X) ((TEMP_C(X) * 1.8) + 32)

//Array to hold multiplexer channel control pins
int mux_control_pins[3] = { MUX_A, MUX_B, MUX_C };

//Set size of the multiplexer control pins for use in the sketch
int mux_control_pins_sz = MUX_CONTROL_PINS_SZ;

//Multiplexer channel selection configuration
int mux_channels[NUM_SENSORS][3] = {
  { 0, 0, 0 },  //channel 0
  { 1, 0, 0 },  //channel 1
  { 0, 1, 0 },  //channel 2
  { 1, 1, 0 },  //channel 3
  { 0, 0, 1 },  //channel 4
  { 1, 0, 1 },  //channel 5
  { 0, 1, 1 },  //channel 6
  { 1, 1, 1 }   //channel 7
};

//Define multiplexer data pin
#define MUX_DATA_PIN A0

//Define sensors connected to the ic pin. You can use your own set of sensors or analo input devices.
#define AMBIENT_SENSE_PIN 0
#define BATT_VOLT_SENSE_PIN 1
#define TEMP_SENSE_PIN 2

// Assign pins
int mux_data_pin = MUX_DATA_PIN;
int batt_volt_sense_pin = BATT_VOLT_SENSE_PIN;
int ambient_sense_pin = AMBIENT_SENSE_PIN;
int temp_sense_pin = TEMP_SENSE_PIN;

//Multiplexer read timer variables used to read data at an interval
int sensors_read_timer;
int sensors_read_time = 5;

// Setup function
void setup() {
  //Serial port initialization
  Serial.begin(115200);

  // Initialize multiplexer control pins
  for (int i = 0; i < mux_control_pins_sz; i++){
	pinMode(mux_control_pins[i], OUTPUT);
    digitalWrite(mux_control_pins[i], LOW);
  }
  Serial.println("initialized.");
}

//Loop function
void loop() {
  if (EverySecond()) {
    sensors_read_timer++;
    if (sensors_read_timer >= sensors_read_time) {
      Serial.printf("Ambient light: %d.\n", read(ambient_sense_pin) * (5 / 1024));
      Serial.printf("Battery voltage: %.1f.\n", (float)(read(batt_volt_sense_pin) * (5 / 1024)));
      Serial.printf("Temperature: %.1f\n", (float)(TEMP_C(read(temp_sense_pin))));
      sensors_read_timer = 0;
    }
  }
}

//Function to read from a specific channel
int read(int channel) {
  for (int i = 0; i < mux_control_pins_sz; i++) {
    digitalWrite(mux_control_pins[i], mux_channels[channel][i]);
  }
  return analogRead(mux_data_pin);
}

//Function to check if a second has elapsed
bool EverySecond() {
  int interval = 1000;
  static int timer = millis();
  if (millis() - timer >= interval) {
    timer += interval;
    return true;
  }
  return false;
}
